version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/node@4.7
  gcp-cli: circleci/gcp-cli@2.4.0

jobs:
  build-and-deploy:
    docker:
      - image: cimg/node:16.13.0
    steps:
      - checkout
      - run:
          name: Checking for package.json
          command: |
            if [ -f "package.json" ]; then
                echo "Found package.json file."
            else
                echo "Unable to find package.json file."
                exit 1
            fi
      - run:
          name: Prepare for caching
          command: |
            if [ -f "package-lock.json" ]; then
                echo "Found package-lock.json file."
                ln package-lock.json /tmp/cache-package-lock.json
            fi
            ln package.json /tmp/cache-package.json
      - restore_cache: # See: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-dependency-cache-{{ arch }}-{ .Branch }}-{{ checksum "/tmp/cache-package.json" }}-{{ checksum "/tmp/cache-package-lock.json" }}
            - v1-dependency-cache-{{ arch }}-{ .Branch }}-{{ checksum "/tmp/cache-package.json" }}
            - v1-dependency-cache-{{ arch }}-{ .Branch }}
      - run:
          name: Installing NPM packages
          command: npm ci
      - save_cache: 
          key: v1-dependency-cache-{{ arch }}-{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths: 
            - ~/.npm
      - restore_cache:
          keys:
            - v1-next-cache-{{ arch }}-{ .Branch }}
            - v1-next-cache
      - run:
          name: Build Next.js app
          command: npm run build
      - save_cache: 
          key: v1-next-cache-{{ arch }}-{ .Branch }}
          paths: 
            - ~/.next/cache
      - gcp-cli/install
      - run:
          name: Initialize gcloud CLI to connect to Google Cloud
          command: |
            # Store service account
            echo $GCLOUD_SERVICE_KEY | base64 --decode > ${HOME}/gcloud-service-key.json

            # Initialize gcloud CLI
            gcloud --quiet config set component_manager/disable_update_check true
            gcloud --quiet config set core/disable_usage_reporting true
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID

            if [[ -n $GOOGLE_COMPUTE_ZONE ]]; then
              gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            fi

            if [[ -n $GOOGLE_COMPUTE_REGION ]]; then
              gcloud --quiet config set compute/region $GOOGLE_COMPUTE_REGION
            fi
      - run:
          name: Describe GAE project
          command: gcloud app describe
      - run:
          name: Deploy to GAE with gcloud
          command: gcloud --quiet app deploy

workflows:
  Nexus:
    jobs:
      - node/test:
          name: Test & Verify
          version: "16.13.0"
      - build-and-deploy:
          name: Build & Deploy
          filters:
            branches:
              only:
                dev
          requires:
            - Test & Verify
